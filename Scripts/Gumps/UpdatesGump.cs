using System;
using System.IO;
using Server;
using Server.Misc;
using Server.Network;
using Server.Mobiles;
using Server.Commands;

namespace Server.Gumps
{
    public class UpdatesGump
    {
        private static bool SendAdMessage = false;
        private static TimeSpan Ad_Time = TimeSpan.FromHours(12);
		private const string Ad_Prompt = "Divinity CE is offered to you free of charge, in exchange for this we ask that you visit our website periodically and click the ads there.  Money from these ads goes to pay for the server which hosts this shard.  Would you like to go there now? (https://github.com/msturgill/divinity)";
		private const string Ad_Url = "https://github.com/msturgill/divinity";
        private const string Ad_OkMsg = "Thank you for supporting Divinity CE!";
        private const string Ad_CancelMsg = "In the future, please take time to click the ads.  The ads pay for bandwidth & hosting fees, without the money generated by YOU clicking the ads, the shard could not say up!";

        private static DateTime m_FileTime;
        private static Packet m_Packet;

        public static void Initialize()
        {
            // this was moved so that we can handle the event before LastLogin was set.
            //EventSink.Login += new LoginEventHandler(On_Login);
            
            CommandSystem.Register("ShowUpdates", AccessLevel.GameMaster, new CommandEventHandler(ShowUpdates));
        }

        public static void On_Login(LoginEventArgs args)
        {
            Accounting.Account a = args.Mobile.Account as Accounting.Account;

            SendUpdateMsg((PlayerMobile)args.Mobile);

            if (SendAdMessage && a.LastLogin + Ad_Time < DateTime.Now && a.LastLogin != DateTime.MinValue)
                args.Mobile.SendGump(new WarningGump(1060637, 30720, Ad_Prompt, 0xFFFFFF, 320, 240, new WarningGumpCallback(OpenBrowser_Callback), null));
        }

        private static void OpenBrowser_Callback(Mobile m, bool okay, object unused)
        {
            if (okay)
            {
                m.SendAsciiMessage(Ad_OkMsg);
                m.LaunchBrowser(Ad_Url);
            }
            else
            {
                m.SendAsciiMessage(Ad_CancelMsg);
            }
        }

        public static void ShowUpdates(CommandEventArgs args)
        {
            foreach (NetState ns in NetState.Instances)
            {
                try
                {
                    if (ns != null && ns.Mobile != null)
                        SendUpdateMsg(ns.Mobile);
                }
                catch
                {
                }
            }
        }

        private static void SendUpdateMsg(Mobile m)
        {
            if (!File.Exists("update.txt"))
                return;

            Accounting.Account a = m.Account as Accounting.Account;

            DateTime time = File.GetLastWriteTime("update.txt");

            /*if ( a.AccessLevel >= AccessLevel.Administrator )
                m.SendMessage( "Updates: LastUpdate={0}, LastLogin={1}, Cmp={2}",
                    time.Ticks, a.LastLogin.Ticks, ( time.Ticks >= a.LastLogin.Ticks ) );*/

            if ( time.Ticks >= a.LastLogin.Ticks )
            {
                if (time != m_FileTime || m_Packet == null)
                {
                    m_FileTime = time;
                    Packet.Release(ref m_Packet);
                    m_Packet = new ScrollMessage(0x02, (int)time.Ticks, ReadFile("update.txt"));
                    m_Packet.SetStatic();
                }

                m.Send(m_Packet);
            }
        }

        private static string ReadFile(string name)
        {
            using (StreamReader reader = new StreamReader(name))
                return reader.ReadToEnd().Replace((char)10, (char)13);
        }
    }
}

